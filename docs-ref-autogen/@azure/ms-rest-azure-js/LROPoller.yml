### YamlMime:UniversalReference
items:
  - uid: '@azure/ms-rest-azure-js.LROPoller'
    name: LROPoller
    fullName: LROPoller
    children:
      - '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
      - '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
      - '@azure/ms-rest-azure-js.LROPoller.getPollState'
      - '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
      - '@azure/ms-rest-azure-js.LROPoller.isFinished'
      - '@azure/ms-rest-azure-js.LROPoller.constructor'
      - '@azure/ms-rest-azure-js.LROPoller.poll'
      - '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    langs:
      - typeScript
    type: class
    summary: <span data-ttu-id="e1e3f-101">提供與 LROs 互動的特殊方法，（長時間執行的作業） 的 HTTP 作業回應。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-101">An HTTP operation response that provides special methods for interacting with LROs (long running operations).</span></span>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getInitialResponse'
    name: getInitialResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="e1e3f-102">取得第一個回應服務時，傳送回起始 LRO。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-102">Get the first response that the service sent back when the LRO was initiated.</span></span>
    syntax:
      content: function getInitialResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getMostRecentResponse'
    name: getMostRecentResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="e1e3f-103">取得最新 service 傳送這個 LRO 時所傳回的回應。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-103">Get the most recent response that the service sent back during this LRO.</span></span>
    syntax:
      content: function getMostRecentResponse()
      parameters: []
      return:
        type:
          - HttpOperationResponse
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationResponse'
    name: getOperationResponse()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      <span data-ttu-id="e1e3f-104">完成 LRO 和可接受的狀態，則傳回 HttpOperationResponse。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-104">If the LRO is finished and in an acceptable state, then return the HttpOperationResponse.</span></span> <span data-ttu-id="e1e3f-105">如果完成 LRO 並不是處於可接受的狀態，然後擲回 LRO 所產生的錯誤。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-105">If the LRO is finished and not in an acceptable state, then throw the error that the LRO produced.</span></span>
      <span data-ttu-id="e1e3f-106">如果尚未完成 LRO，則傳回未定義。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-106">If the LRO is not finished, then return undefined.</span></span>
    syntax:
      content: function getOperationResponse()
      parameters: []
      return:
        type:
          - Promise<HttpOperationResponse | undefined>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getOperationStatus'
    name: getOperationStatus()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="e1e3f-107">取得 LRO 的目前狀態。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-107">Get the current status of the LRO.</span></span>
    syntax:
      content: function getOperationStatus()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LongRunningOperationStates'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.getPollState'
    name: getPollState()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="e1e3f-108">取得可用來輪詢不同內容中的此 LRO LROPollState 物件 (例如不同的處理序或不同機器上)。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-108">Get an LROPollState object that can be used to poll this LRO in a different context (such as on a different process or a different machine).</span></span> <span data-ttu-id="e1e3f-109">如果 LRO 無法產生 LRO 輪詢策略，然後這會傳回未定義。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-109">If the LRO couldn''t produce an LRO polling strategy, then this will return undefined.</span></span>'
    syntax:
      content: function getPollState()
      parameters: []
      return:
        type:
          - '@azure/ms-rest-azure-js.LROPollState | undefined'
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinalStatusAcceptable'
    name: isFinalStatusAcceptable()
    children: []
    type: method
    langs:
      - typeScript
    summary: '<span data-ttu-id="e1e3f-110">取得完成 LRO，而且其最終狀態可以接受。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-110">Get whether or not the LRO is finished and its final state is acceptable.</span></span> <span data-ttu-id="e1e3f-111">如果 LRO 未完成，則未定義將會傳回。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-111">If the LRO has not finished yet, then undefined will be returned.</span></span> <span data-ttu-id="e1e3f-112">「 可接受 」 的最終狀態取決於 LRO 策略的 Azure 服務用來執行長時間執行的作業。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-112">An "acceptable" final state is determined by the LRO strategy that the Azure service uses to perform long running operations.</span></span>'
    syntax:
      content: function isFinalStatusAcceptable()
      parameters: []
      return:
        type:
          - boolean | undefined
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.isFinished'
    name: isFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="e1e3f-113">取得完成 LRO。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-113">Get whether or not the LRO is finished.</span></span>
    syntax:
      content: function isFinished()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.constructor'
    name: 'LROPoller(LROPollStrategy | undefined, HttpOperationResponse)'
    children: []
    type: constructor
    langs:
      - typeScript
    summary: <span data-ttu-id="e1e3f-114">建立新的 HttpLongRunningOperationResponse。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-114">Create a new HttpLongRunningOperationResponse.</span></span>
    syntax:
      content: 'new LROPoller(_lroPollStrategy: LROPollStrategy | undefined, _initialResponse: HttpOperationResponse)'
      parameters:
        - id: _lroPollStrategy
          type:
            - '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
          description: |
            <span data-ttu-id="e1e3f-115">此 HttpLongRunningOperationResponse 會用來與 LRO 互動 LROPollStrategy。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-115">The LROPollStrategy that this HttpLongRunningOperationResponse will use to interact with the LRO.</span></span>
        - id: _initialResponse
          type:
            - HttpOperationResponse
          description: ''
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.poll'
    name: poll()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="e1e3f-116">傳送單一的輪詢要求，並傳回 LRO 的狀態。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-116">Send a single poll request and return the LRO's state.</span></span>
    syntax:
      content: function poll()
      parameters: []
      return:
        type:
          - Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    package: '@azure/ms-rest-azure-js'
  - uid: '@azure/ms-rest-azure-js.LROPoller.pollUntilFinished'
    name: pollUntilFinished()
    children: []
    type: method
    langs:
      - typeScript
    summary: <span data-ttu-id="e1e3f-117">將檢查 LRO 的狀態，直到判定，完成 LRO 的輪詢要求傳送。</span><span class="sxs-lookup"><span data-stu-id="e1e3f-117">Send poll requests that check the LRO's status until it is determined that the LRO is finished.</span></span>
    syntax:
      content: function pollUntilFinished()
      parameters: []
      return:
        type:
          - Promise<RestResponse>
    package: '@azure/ms-rest-azure-js'
references:
  - uid: '@azure/ms-rest-azure-js.LROPollStrategy | undefined'
    name: LROPollStrategy | undefined
    spec.typeScript:
      - name: LROPollStrategy
        fullName: LROPollStrategy
        uid: '@azure/ms-rest-azure-js.LROPollStrategy'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
    name: LongRunningOperationStates
    spec.typeScript:
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
  - uid: '@azure/ms-rest-azure-js.LROPollState | undefined'
    name: LROPollState | undefined
    spec.typeScript:
      - name: LROPollState
        fullName: LROPollState
        uid: '@azure/ms-rest-azure-js.LROPollState'
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: Promise<@azure/ms-rest-azure-js.LongRunningOperationStates>
    name: LongRunningOperationStates>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: LongRunningOperationStates
        fullName: LongRunningOperationStates
        uid: '@azure/ms-rest-azure-js.LongRunningOperationStates'
      - name: '>'
        fullName: '>'