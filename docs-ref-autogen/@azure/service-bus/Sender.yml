### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.Sender'
    name: Sender
    fullName: Sender
    children:
      - '@azure/service-bus.Sender.cancelScheduledMessage'
      - '@azure/service-bus.Sender.cancelScheduledMessages'
      - '@azure/service-bus.Sender.close'
      - '@azure/service-bus.Sender.isClosed'
      - '@azure/service-bus.Sender.scheduleMessage'
      - '@azure/service-bus.Sender.scheduleMessages'
      - '@azure/service-bus.Sender.send'
      - '@azure/service-bus.Sender.sendBatch'
    langs:
      - typeScript
    type: class
    summary: |-
      寄件者的類別可用來傳送訊息、 排程於稍後傳送] 和 [取消這類排程的訊息的訊息。
      使用`createSender`QueueClient 或 TopicClient 來具現化傳送者的函式。
      寄件者的類別是基礎 AMQP 寄件者連結的抽象概念。
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessage'
    name: cancelScheduledMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: 取消已排程為出現在服務匯流排佇列/訂閱訊息。
    syntax:
      content: 'function cancelScheduledMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: 要取消之訊息的序號。
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.cancelScheduledMessages'
    name: 'cancelScheduledMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 取消已排程要出現在服務匯流排佇列/訂用帳戶的多個訊息。
    syntax:
      content: 'function cancelScheduledMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: 要取消訊息的序號的陣列。
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      關閉基礎 AMQP 寄件者連結。
      一旦關閉，寄件者無法用於任何進一步的作業。
      使用`createSender`QueueClient 或 TopicClient 來具現化新的寄件者的函式
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: 傳回`true`如果寄件者或建立它的用戶端已關閉
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessage'
    name: 'scheduleMessage(Date, SendableMessageInfo)'
    children: []
    type: method
    langs:
      - typeScript
    summary: 指定訊息出現在服務匯流排佇列/訂用帳戶，在稍後的排程。
    syntax:
      content: 'function scheduleMessage(scheduledEnqueueTimeUtc: Date, message: SendableMessageInfo)'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: 此時應將訊息加入佇列的 UTC 時間。
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: 需要將它排程訊息。
      return:
        type:
          - Promise<Long>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.scheduleMessages'
    name: 'scheduleMessages(Date, SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 指定訊息出現在服務匯流排佇列/訂用帳戶，在稍後的排程。
    syntax:
      content: 'function scheduleMessages(scheduledEnqueueTimeUtc: Date, messages: SendableMessageInfo[])'
      parameters:
        - id: scheduledEnqueueTimeUtc
          type:
            - Date
          description: 在訊息應已加入佇列的 UTC 時間。
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: 需要排程的訊息陣列。
      return:
        type:
          - 'Promise<Long[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.send'
    name: send(SendableMessageInfo)
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      在建立 AMQP 寄件者 連結，如果尚未存在之後，請傳送指定的訊息。
      若要將訊息傳送至`session`及/或`partition`啟用的佇列/主題，設定`sessionId`及/或`partitionKey`分別訊息上的屬性。
    syntax:
      content: 'function send(message: SendableMessageInfo)'
      parameters:
        - id: message
          type:
            - '@azure/service-bus.SendableMessageInfo'
          description: 要傳送的訊息。
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.Sender.sendBatch'
    name: 'sendBatch(SendableMessageInfo[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      之後建立 AMQP 寄件者 連結，如果尚未存在，請以單一批次，也就是在單一的 AMQP 訊息中傳送指定的訊息。
      - 若要將訊息傳送至`session`及/或`partition`啟用的佇列/主題，設定`sessionId`及/或`partitionKey`分別在訊息上的屬性。
      - 這樣一來，當批次中的所有訊息應該都具有相同`sessionId`（如果使用工作階段） 和相同`parititionKey`（如果使用分割區數目）。
    syntax:
      content: 'function sendBatch(messages: SendableMessageInfo[])'
      parameters:
        - id: messages
          type:
            - '@azure/service-bus.SendableMessageInfo[]'
          description: 要在批次訊息中傳送的 SendableMessageInfo 物件的陣列。
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.SendableMessageInfo'
    name: SendableMessageInfo
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
  - uid: '@azure/service-bus.SendableMessageInfo[]'
    name: 'SendableMessageInfo[]'
    spec.typeScript:
      - name: SendableMessageInfo
        fullName: SendableMessageInfo
        uid: '@azure/service-bus.SendableMessageInfo'
      - name: '[]'
        fullName: '[]'