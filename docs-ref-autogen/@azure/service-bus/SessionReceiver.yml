### YamlMime:UniversalReference
items:
  - uid: '@azure/service-bus.SessionReceiver'
    name: SessionReceiver
    fullName: SessionReceiver
    children:
      - '@azure/service-bus.SessionReceiver.close'
      - '@azure/service-bus.SessionReceiver.getMessageIterator'
      - '@azure/service-bus.SessionReceiver.getState'
      - '@azure/service-bus.SessionReceiver.isClosed'
      - '@azure/service-bus.SessionReceiver.isReceivingMessages'
      - '@azure/service-bus.SessionReceiver.peek'
      - '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
      - '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
      - '@azure/service-bus.SessionReceiver.receiveMessages'
      - '@azure/service-bus.SessionReceiver.receiveMode'
      - '@azure/service-bus.SessionReceiver.registerMessageHandler'
      - '@azure/service-bus.SessionReceiver.renewSessionLock'
      - '@azure/service-bus.SessionReceiver.sessionId'
      - '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
      - '@azure/service-bus.SessionReceiver.setState'
    langs:
      - typeScript
    type: class
    summary: |-
      SessionReceiver 類別可用來啟用工作階段中接收訊息的佇列或訂用帳戶中批次，或藉由註冊處理常式。
      使用`createReceiver`QueueClient 或 SubscriptionClient SessionReceiver 具現化的函式。
      SessionReceiver 類別是在基礎 AMQP 接收者連結的抽象概念。
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.close'
    name: close()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      關閉基礎 AMQP 接收者連結。
      一旦關閉，接收者不能用於任何進一步的作業。
      使用`createReceiver`QueueClient 或 SubscriptionClient 來具現化新的接收器上的函式
    syntax:
      content: function close()
      parameters: []
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getMessageIterator'
    name: getMessageIterator()
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      取得非同步迭代器，透過訊息接收者。
      如果有另一個接收作業在相同的接收端上進行，則會擲回錯誤。 如果您不確定是否有為另一個接收作業執行、 檢查`isReceivingMessages`接收器上的屬性。

      如果迭代器不能超過一分鐘，擷取中的新訊息`undefined`會傳回
    syntax:
      content: function getMessageIterator()
      parameters: []
      return:
        type:
          - AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.getState'
    name: getState()
    children: []
    type: method
    langs:
      - typeScript
    summary: '取得工作階段的狀態。 如需工作階段狀態的詳細資訊，請參閱[工作階段狀態](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: function getState()
      parameters: []
      return:
        type:
          - Promise<any>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isClosed'
    name: isClosed
    fullName: isClosed
    children: []
    langs:
      - typeScript
    type: property
    summary: 傳回`true`如果接收者已關閉。 這種情形是因為接收者本身已關閉，或用戶端，建立已關閉。
    syntax:
      content: 'isClosed: boolean'
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.isReceivingMessages'
    name: isReceivingMessages()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      指出是否將接收器目前接收訊息或不。
      當它會傳回 true，新`registerMessageHandler()`或`receiveMessages()`無法進行呼叫。
    syntax:
      content: function isReceivingMessages()
      parameters: []
      return:
        type:
          - boolean
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peek'
    name: peek(undefined | number)
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      擷取作用中訊息的下一個批次 （包括但不是停止傳送訊息延遲） 目前的工作階段中。
      - 第一次呼叫`peek()`會擷取第一個作用中的訊息。 每個後續的呼叫會擷取後續的訊息。
      - 不同於`received`訊息，`peeked`訊息是訊息的唯讀版本。
      它不能是`Completed/Abandoned/Deferred/Deadlettered`。 無法更新它的鎖定。
    syntax:
      content: 'function peek(maxMessageCount?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - undefined | number
          description: 若要查看的訊息數目上限。 預設值`1`。
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.peekBySequenceNumber'
    name: 'peekBySequenceNumber(Long, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      查看所需的作用中訊息數目 （包括但不是停止傳送訊息延遲） 從目前的工作階段中指定的序號。
      - 不同於`received`訊息，`peeked`訊息是訊息的唯讀版本。
      它不能是`Completed/Abandoned/Deferred/Deadlettered`。 無法更新它的鎖定。
    syntax:
      content: 'function peekBySequenceNumber(fromSequenceNumber: Long, maxMessageCount?: undefined | number)'
      parameters:
        - id: fromSequenceNumber
          type:
            - Long
          description: 從中讀取訊息的序號。
        - id: maxMessageCount
          type:
            - undefined | number
          description: ''
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessage'
    name: receiveDeferredMessage(Long)
    children: []
    type: method
    langs:
      - typeScript
    summary: 傳回可解析成所識別的延後訊息的 promise 指定`sequenceNumber`。
    syntax:
      content: 'function receiveDeferredMessage(sequenceNumber: Long)'
      parameters:
        - id: sequenceNumber
          type:
            - Long
          description: 要接收訊息的序號。
      return:
        type:
          - Promise<@azure/service-bus.ServiceBusMessage | undefined>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveDeferredMessages'
    name: 'receiveDeferredMessages(Long[])'
    children: []
    type: method
    langs:
      - typeScript
    summary: 傳回可解析成陣列識別的延後訊息的 promise 藉由指定`sequenceNumbers`。
    syntax:
      content: 'function receiveDeferredMessages(sequenceNumbers: Long[])'
      parameters:
        - id: sequenceNumbers
          type:
            - 'Long[]'
          description: 要接收訊息的序號的陣列。
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMessages'
    name: 'receiveMessages(number, undefined | number)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      傳回可解析的訊息陣列的 promise 根據指定的計數及逾時透過 AMQP 接收者從佇列/訂用帳戶的連結。
      如果有另一個接收作業在相同的接收端上進行，則會擲回錯誤。 如果您不確定是否有為另一個接收作業執行、 檢查`isReceivingMessages`接收器上的屬性。
    syntax:
      content: 'function receiveMessages(maxMessageCount: number, maxWaitTimeInSeconds?: undefined | number)'
      parameters:
        - id: maxMessageCount
          type:
            - number
          description: 從佇列/訂用帳戶接收的訊息數目上限。
        - id: maxWaitTimeInSeconds
          type:
            - undefined | number
          description: |-
            最大等待時間 （秒），接收者應該等候接收第一個訊息。 如果此時不收到任何訊息時，傳回的承諾取得解析為空陣列。
            - **預設值**:`60`秒。
          optional: true
      return:
        type:
          - 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.receiveMode'
    name: receiveMode
    fullName: receiveMode
    children: []
    langs:
      - typeScript
    type: property
    summary: 表示此收件者的 receiveMode。
    syntax:
      content: 'receiveMode: ReceiveMode'
      return:
        type:
          - '@azure/service-bus.ReceiveMode'
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.registerMessageHandler'
    name: 'registerMessageHandler(OnMessage, OnError, SessionMessageHandlerOptions)'
    children: []
    type: method
    langs:
      - typeScript
    summary: |
      註冊處理常式來處理 AMQP 接收者連結上自佇列/訂閱訊息的內送資料流。
      若要停止接收訊息，請呼叫`close()`SessionReceiver 上。
      如果有另一個接收作業在相同的接收端上進行，則會擲回錯誤。 如果您不確定是否有為另一個接收作業執行、 檢查`isReceivingMessages`接收器上的屬性。
    syntax:
      content: 'function registerMessageHandler(onMessage: OnMessage, onError: OnError, options?: SessionMessageHandlerOptions)'
      parameters:
        - id: onMessage
          type:
            - '@azure/service-bus.OnMessage'
          description: 處理每則傳入訊息的處理常式。
        - id: onError
          type:
            - '@azure/service-bus.OnError'
          description: 在接收或處理訊息時，就會發生任何錯誤處理常式。
        - id: options
          type:
            - '@azure/service-bus.SessionMessageHandlerOptions'
          description: |
            若要控制是否應該自動完成訊息，或如果應該自動更新的工作階段上鎖定的選項。 您可以控制應同時處理的訊息數目上限。 您也可以提供以秒為單位來表示的時間等待新訊息，再關閉接收者的逾時。
          optional: true
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.renewSessionLock'
    name: renewSessionLock()
    children: []
    type: method
    langs:
      - typeScript
    summary: |-
      佇列/訂用帳戶建立期間，在所指定的持續時間的工作階段更新鎖定。
      - 檢查`sessionLockedUntilUtc`上鎖定的到期的時間的 SessionReceiver 屬性。
      - 當工作階段上的鎖定到期時
          - 可以使用此收件者不收到任何訊息
          - 如果訊息尚未採取實際 (使用`complete()`，`defer()`或`deadletter()`，在工作階段之前鎖定到期，然後傳回佇列/訂用帳戶中下一個訊息陸地接收作業。
    syntax:
      content: function renewSessionLock()
      parameters: []
      return:
        type:
          - Promise<Date>
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionId'
    name: sessionId
    fullName: sessionId
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      此收件者將從其接收訊息的工作階段識別碼。
      直到 AMQP 接收者連結已成功設定工作階段，則會傳回未定義。
    syntax:
      content: 'sessionId: string | undefined'
      return:
        type:
          - string | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.sessionLockedUntilUtc'
    name: sessionLockedUntilUtc
    fullName: sessionLockedUntilUtc
    children: []
    langs:
      - typeScript
    type: property
    summary: |-
      時間-utc 時區到哪一個工作階段已被鎖定。
      每次`renewSessionLock()`是呼叫，這次會更新為目前時間加上所指定的鎖定持續時間在佇列/訂用帳戶建立期間。

      直到 AMQP 接收者連結已成功設定工作階段，則會傳回未定義。
    syntax:
      content: 'sessionLockedUntilUtc: Date | undefined'
      return:
        type:
          - Date | undefined
    package: '@azure/service-bus'
  - uid: '@azure/service-bus.SessionReceiver.setState'
    name: setState(any)
    children: []
    type: method
    langs:
      - typeScript
    summary: '在工作階段上設定的狀態。 如需工作階段狀態的詳細資訊，請參閱[工作階段狀態](https://docs.microsoft.com/en-us/azure/service-bus-messaging/message-sessions#message-session-state)'
    syntax:
      content: 'function setState(state: any)'
      parameters:
        - id: state
          type:
            - any
          description: |
            必須設定狀態。
      return:
        type:
          - Promise<void>
    package: '@azure/service-bus'
references:
  - uid: '@azure/service-bus.ReceiveMode'
    name: ReceiveMode
    spec.typeScript:
      - name: ReceiveMode
        fullName: ReceiveMode
        uid: '@azure/service-bus.ReceiveMode'
  - uid: AsyncIterableIterator<@azure/service-bus.ServiceBusMessage>
    name: ServiceBusMessage>
    spec.typeScript:
      - name: AsyncIterableIterator<
        fullName: AsyncIterableIterator<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '>'
        fullName: '>'
  - uid: 'Promise<@azure/service-bus.ReceivedMessageInfo[]>'
    name: 'ReceivedMessageInfo[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ReceivedMessageInfo
        fullName: ReceivedMessageInfo
        uid: '@azure/service-bus.ReceivedMessageInfo'
      - name: '[]>'
        fullName: '[]>'
  - uid: Promise<@azure/service-bus.ServiceBusMessage | undefined>
    name: ServiceBusMessage | undefined>
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: ' | undefined>'
        fullName: ' | undefined>'
  - uid: 'Promise<@azure/service-bus.ServiceBusMessage[]>'
    name: 'ServiceBusMessage[]>'
    spec.typeScript:
      - name: Promise<
        fullName: Promise<
      - name: ServiceBusMessage
        fullName: ServiceBusMessage
        uid: '@azure/service-bus.ServiceBusMessage'
      - name: '[]>'
        fullName: '[]>'
  - uid: '@azure/service-bus.OnMessage'
    name: OnMessage
    spec.typeScript:
      - name: OnMessage
        fullName: OnMessage
        uid: '@azure/service-bus.OnMessage'
  - uid: '@azure/service-bus.OnError'
    name: OnError
    spec.typeScript:
      - name: OnError
        fullName: OnError
        uid: '@azure/service-bus.OnError'
  - uid: '@azure/service-bus.SessionMessageHandlerOptions'
    name: SessionMessageHandlerOptions
    spec.typeScript:
      - name: SessionMessageHandlerOptions
        fullName: SessionMessageHandlerOptions
        uid: '@azure/service-bus.SessionMessageHandlerOptions'