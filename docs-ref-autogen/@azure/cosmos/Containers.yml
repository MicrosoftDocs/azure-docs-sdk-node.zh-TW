### YamlMime:UniversalReference
ms.openlocfilehash: 1aa6f8d573fc6248e534db33c9d88b9d44b294c6
ms.sourcegitcommit: 286f52ea38c9eff2ec9d4f8cabeb86f62fd9c406
ms.translationtype: MT
ms.contentlocale: zh-TW
ms.lasthandoff: 08/22/2018
ms.locfileid: "41702347"
items:
- uid: '@azure/cosmos.Containers'
  name: Containers
  fullName: Containers
  children:
  - '@azure/cosmos.Containers.constructor'
  - '@azure/cosmos.Containers.create'
  - '@azure/cosmos.Containers.createIfNotExists'
  - '@azure/cosmos.Containers.database'
  - '@azure/cosmos.Containers.query'
  - '@azure/cosmos.Containers.readAll'
  langs:
  - typeScript
  type: class
  summary: <span data-ttu-id="0fa9e-101">建立新的容器，以及讀取/查詢的所有容器的作業</span><span class="sxs-lookup"><span data-stu-id="0fa9e-101">Operations for creating new containers, and reading/querying all containers</span></span>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.constructor'
  name: Containers
  children: []
  type: constructor
  langs:
  - typeScript
  summary: ''
  syntax:
    content: 'new Containers(database: Database, clientContext: ClientContext)'
    parameters:
    - id: database
      type:
      - '@azure/cosmos.Database'
      description: ''
    - id: clientContext
      type:
      - ClientContext
      description: ''
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.create'
  name: create
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="0fa9e-102">建立容器。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-102">Creates a container.</span></span>

    <span data-ttu-id="0fa9e-103">容器是具名項目的邏輯容器。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-103">A container is a named logical container for items.</span></span>


    <span data-ttu-id="0fa9e-104">資料庫可能包含零個或多個命名的容器，並且每個容器包含零個或多個 JSON 項目。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-104">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="0fa9e-105">在無結構描述，在容器中的項目不需要共用相同的結構或欄位。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-105">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="0fa9e-106">因為容器應用程式資源，它們可以授權使用的主要金鑰 」 或 「 資源索引鍵。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-106">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function create(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="0fa9e-107">表示容器的本文。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-107">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="0fa9e-108">使用設定選項，例如回應頁面大小、 接續 token 等等。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-108">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.createIfNotExists'
  name: createIfNotExists
  children: []
  type: method
  langs:
  - typeScript
  summary: >
    <span data-ttu-id="0fa9e-109">如果容器存在，而且，如果沒有，就會建立檢查。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-109">Checks if a Container exists, and, if it doesn't, creates it.</span></span>

    <span data-ttu-id="0fa9e-110">這會讓讀取的作業中的識別碼依據`body`，接著，如果它找不到，建立作業。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-110">This will make a read operation based on the id in the `body`, then if it is not found, a create operation.</span></span>

    <span data-ttu-id="0fa9e-111">您應該確認輸出符合您傳入的非預設屬性 （也就是索引編製原則/等等） 的主體容器是具名項目的邏輯容器。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-111">You should confirm that the output matches the body you passed in for non-default properties (i.e. indexing policy/etc.) A container is a named logical container for items.</span></span>


    <span data-ttu-id="0fa9e-112">資料庫可能包含零個或多個命名的容器，並且每個容器包含零個或多個 JSON 項目。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-112">A database may contain zero or more named containers and each container consists of zero or more JSON items.</span></span>


    <span data-ttu-id="0fa9e-113">在無結構描述，在容器中的項目不需要共用相同的結構或欄位。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-113">Being schema-free, the items in a container do not need to share the same structure or fields.</span></span>



    <span data-ttu-id="0fa9e-114">因為容器應用程式資源，它們可以授權使用的主要金鑰 」 或 「 資源索引鍵。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-114">Since containers are application resources, they can be authorized using either the master key or resource keys.</span></span>
  syntax:
    content: 'function createIfNotExists(body: ContainerDefinition, options?: RequestOptions)'
    parameters:
    - id: body
      type:
      - '@azure/cosmos.ContainerDefinition'
      description: <span data-ttu-id="0fa9e-115">表示容器的本文。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-115">Represents the body of the container.</span></span>
    - id: options
      type:
      - '@azure/cosmos.RequestOptions'
      description: >
        <span data-ttu-id="0fa9e-116">使用設定選項，例如回應頁面大小、 接續 token 等等。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-116">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - Promise<@azure/cosmos.ContainerResponse>
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.database'
  name: database
  fullName: database
  children: []
  langs:
  - typeScript
  type: property
  summary: ''
  syntax:
    content: 'database: Database'
    return:
      type:
      - '@azure/cosmos.Database'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.query'
  name: query
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="0fa9e-117">查詢所有容器。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-117">Queries all containers.</span></span>
  syntax:
    content: 'function query(query: SqlQuerySpec, options?: FeedOptions)'
    parameters:
    - id: query
      type:
      - '@azure/cosmos.SqlQuerySpec'
      description: <span data-ttu-id="0fa9e-118">查詢作業的組態。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-118">Query configuration for the operation.</span></span> <span data-ttu-id="0fa9e-119">請參閱<xref:SqlQuerySpec>如需如何設定查詢的詳細資訊。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-119">See <xref:SqlQuerySpec> for more info on how to configure a query.</span></span>
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="0fa9e-120">使用設定選項，例如回應頁面大小、 接續 token 等等。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-120">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
- uid: '@azure/cosmos.Containers.readAll'
  name: readAll
  children: []
  type: method
  langs:
  - typeScript
  summary: <span data-ttu-id="0fa9e-121">讀取所有容器。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-121">Read all containers.</span></span>
  syntax:
    content: 'function readAll(options?: FeedOptions)'
    parameters:
    - id: options
      type:
      - '@azure/cosmos.FeedOptions'
      description: <span data-ttu-id="0fa9e-122">使用設定選項，例如回應頁面大小、 接續 token 等等。</span><span class="sxs-lookup"><span data-stu-id="0fa9e-122">Use to set options like response page size, continuation tokens, etc.</span></span>
      optional: true
    return:
      type:
      - '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  package: '@azure/cosmos'
references:
- uid: '@azure/cosmos.Database'
  spec.typeScript:
  - name: Database
    fullName: Database
    uid: '@azure/cosmos.Database'
- uid: '@azure/cosmos.ContainerDefinition'
  spec.typeScript:
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
- uid: '@azure/cosmos.RequestOptions'
  spec.typeScript:
  - name: RequestOptions
    fullName: RequestOptions
    uid: '@azure/cosmos.RequestOptions'
- uid: Promise<@azure/cosmos.ContainerResponse>
  spec.typeScript:
  - name: Promise<
    fullName: Promise<
  - name: ContainerResponse
    fullName: ContainerResponse
    uid: '@azure/cosmos.ContainerResponse'
  - name: '>'
    fullName: '>'
- uid: '@azure/cosmos.SqlQuerySpec'
  spec.typeScript:
  - name: SqlQuerySpec
    fullName: SqlQuerySpec
    uid: '@azure/cosmos.SqlQuerySpec'
- uid: '@azure/cosmos.FeedOptions'
  spec.typeScript:
  - name: FeedOptions
    fullName: FeedOptions
    uid: '@azure/cosmos.FeedOptions'
- uid: '@azure/cosmos.QueryIterator<@azure/cosmos.ContainerDefinition>'
  spec.typeScript:
  - name: QueryIterator
    fullName: QueryIterator
    uid: '@azure/cosmos.QueryIterator'
  - name: <
    fullName: <
  - name: ContainerDefinition
    fullName: ContainerDefinition
    uid: '@azure/cosmos.ContainerDefinition'
  - name: '>'
    fullName: '>'
